---
import { ViewTransitions } from 'astro:transitions';

import appConfig from './app.config';
import type { LiteralUnion, SEOMeta } from './types/general';

interface LinkDescriptor {
  /**
   * Address of the hyperlink
   */
  href: string;

  /**
   * Relationship between the document containing the hyperlink and the destination resource
   */
  rel: LiteralUnion<
    | 'alternate'
    | 'dns-prefetch'
    | 'icon'
    | 'manifest'
    | 'modulepreload'
    | 'next'
    | 'pingback'
    | 'preconnect'
    | 'prefetch'
    | 'preload'
    | 'prerender'
    | 'search'
    | 'stylesheet',
    string
  >;

  /**
   * Sizes of the icons (for rel="icon")
   */
  sizes?: string;

  /**
   * Hint for the type of the referenced resource
   */
  type?: string;

  /**
   * Color to use when customizing a site's icon (for rel="mask-icon")
   */
  color?: string;
}

interface Props extends Partial<SEOMeta> {
  disabledCanonicalURL?: boolean;
  keyword?: string;
  noIndex?: boolean;
}

const DEFAULT_TITLE = 'Explore movies';
const DEFAULT_DESCRIPTION = appConfig.manifest.description;

const DEFAULT_IMAGE_URL =
  'https://avatars1.githubusercontent.com/u/44445726?s=460&u=7226c3b6d6e2d2163dd0eab652c20aaba6775755&v=4';

const DEFAULT_KEYWORD = [
  ...import.meta.env.KEYWORDS,
  DEFAULT_TITLE,
].join(', ');

const {
  description = DEFAULT_DESCRIPTION,
  disabledCanonicalURL,
  imageURL = DEFAULT_IMAGE_URL,
  keyword = DEFAULT_KEYWORD,
  noIndex = false,
  title = DEFAULT_TITLE,
} = Astro.props;

const site = appConfig.manifest.name;
const canonicalURL = Astro.url.origin + Astro.url.pathname;

const { browser, isMobile } = Astro.locals.userAgent;

const faviconSizes = ['16', '32'];

const appleIconSizes = [
  '180',
  '152',
  '144',
  '120',
  '114',
  '76',
  '72',
  '60',
  '57',
];

const links = appConfig.manifest.iconSizes
  .map<LinkDescriptor>(iconSize => ({
    rel: 'icon',
    type: 'image/png',
    href: `/icons/android-chrome-${iconSize}x${iconSize}.png`,
  }))
  .concat(
    faviconSizes.map(iconSize => {
      const sizes = `${iconSize}x${iconSize}`;
      return {
        rel: 'icon',
        type: 'image/png',
        href: `/icons/favicon-${sizes}.png`,
        sizes,
      };
    }),
    appleIconSizes.map(iconSize => {
      const sizes = `${iconSize}x${iconSize}`;
      return {
        rel: 'apple-touch-icon',
        type: 'image/png',
        href: `/icons/apple-touch-icon-${sizes}.png`,
        sizes,
      };
    }),
    [
      {
        rel: 'mask-icon',
        href: '/icons/safari-pinned-tab.svg',
        color: appConfig.manifest.themeColor,
      },
      {
        rel: 'manifest',
        href: '/manifest.json',
      },
      {
        rel: 'icon',
        href: '/favicon.ico',
      },
      {
        rel: 'shortcut icon',
        href: '/favicon.ico',
      },
    ],
  );
---

<!doctype html>
<html
  class={`${isMobile ? 'mobile' : 'desktop'}`}
  data-browser-name={browser.name}
  data-browser-version={browser.version}
  lang='en'
>
  <head>
    <ViewTransitions fallback='animate' />

    <meta transition:persist='charset' charset='UTF-8' />
    <meta
      transition:persist='http-equiv'
      http-equiv='X-UA-Compatible'
      content='IE=edge'
    />
    <meta
      transition:persist='generator'
      name='generator'
      content={Astro.generator}
    />
    <meta
      transition:persist='viewport'
      name='viewport'
      content='width=device-width, initial-scale=1.0'
    />
    <meta
      transition:persist='theme-color'
      name='theme-color'
      content={appConfig.manifest.themeColor}
    />
    <meta
      transition:persist='app-name'
      name='application-name'
      content={appConfig.manifest.name}
    />

    <meta
      transition:persist='apple-mobile-web-app-capable'
      name='apple-mobile-web-app-capable'
      content='yes'
    />
    <meta
      transition:persist='apple-mobile-web-app-title'
      name='apple-mobile-web-app-title'
      content={appConfig.manifest.name}
    />
    <meta
      transition:persist='apple-mobile-web-app-status-bar-style'
      name='apple-mobile-web-app-status-bar-style'
      content='default'
    />
    <meta
      transition:persist='msapplication-navbutton-color'
      name='msapplication-navbutton-color'
      content={appConfig.manifest.themeColor}
    />
    <meta
      transition:persist='msapplication-TileColor'
      name='msapplication-TileColor'
      content={appConfig.manifest.backgroundColor}
    />
    <meta
      transition:persist='msapplication-starturl'
      name='msapplication-starturl'
      content='/'
    />
    <meta
      transition:persist='msapplication-tap-highlight'
      name='msapplication-tap-highlight'
      content='no'
    />

    {
      Object.entries(appConfig.manifest.msTileIcon).map(
        ([size, iconName]) => {
          const name = `msapplication-${iconName}${size}`;
          const content = `/icons/mstile-${size}.png`;
          return (
            <meta
              transition:persist={name}
              name={name}
              content={content}
            />
          );
        },
      )
    }

    <title>{title}</title>
    <meta property='og:title' content={title} />
    <meta name='twitter:title' content={title} />

    {
      !disabledCanonicalURL && (
        <>
          <meta property='og:url' content={canonicalURL} />
          <link rel='canonical' href={canonicalURL} />
        </>
      )
    }

    <meta name='description' content={description} />
    <meta property='og:description' content={description} />
    <meta name='twitter:description' content={description} />

    <meta property='og:image' content={imageURL} />
    <meta name='twitter:image' content={imageURL} />

    <meta
      transition:persist='twitter:card'
      name='twitter:card'
      content='summary_large_image'
    />
    <meta
      transition:persist='twitter:creator'
      name='twitter:creator'
      content='@RofiSyahrul'
    />
    <meta
      transition:persist='twitter:site'
      name='twitter:site'
      content={site}
    />
    <meta transition:persist='site' name='site' content={site} />
    <meta
      transition:persist='og:site'
      property='og:site'
      content={site}
    />

    <meta name='keywords' content={keyword} />

    {noIndex && <meta name='robots' content='noindex' />}

    {
      links.map(link => (
        <link
          transition:persist
          rel={link.rel}
          href={link.href}
          sizes={link.sizes}
          type={link.type}
          color={link.color}
        />
      ))
    }

    <slot name='head' />
  </head>

  <body>
    <slot />
  </body>
</html>
